version: '3.8'
name: template01

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password


services:
  productservice:
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code  # Sync local development directory with the container
    depends_on:
        - productservicedb
        - broker
    ports:
      - "8010:8000"  # Expose container port 8000 to host port 8000  

  inventoryservice:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory-service:/code  # Sync local development directory with the container
    depends_on:
        - inventoryservicedb
        - broker
    ports:
      - "8011:8000"  # Expose container port 8000 to host port 8000  

  userservice:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user-service:/code  # Sync local development directory with the container
    depends_on:
        - userservicedb
        - broker
    ports:
      - "8012:8000"  # Expose container port 8000 to host port 8000  

  orderservice:
      build:
        context: ./order-service
        dockerfile: Dockerfile.dev
      volumes:
        - ./order-service:/code  # Sync local development directory with the container
      depends_on:
          - orderservicedb
          - broker
      ports:
        - "8013:8000"  # Expose container port 8000 to host port 8012  

  paymentservice:
        build:
          context: ./payment-service
          dockerfile: Dockerfile.dev
        volumes:
          - ./payment-service:/code  # Sync local development directory with the container
        depends_on:
            - paymentservicedb
            - broker
        ports:
          - "8014:8000"  # Expose container port 8000 to host port 8012  

  notificationservice:
          build:
            context: ./notification-service
            dockerfile: Dockerfile.dev
          volumes:
            - ./notification-service:/code  # Sync local development directory with the container
          depends_on:
              - notificationservicedb
              - broker
          ports:
            - "8015:8000"  # Expose container port 8000 to host port 8012  


  productservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: productservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5434:5432'
    volumes:
        - postgres_product_db:/var/lib/postgresql/data

  inventoryservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: inventoryservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5435:5432'
    volumes:
        - postgres_inventory_db:/var/lib/postgresql/data

  userservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: userservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5436:5432'
    volumes:
        - postgres_user_db:/var/lib/postgresql/data

  orderservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: orderservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5437:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/data

  paymentservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: paymentservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5438:5432'
    volumes:
        - postgres_payment_db:/var/lib/postgresql/data

  notificationservicedb:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: notificationservicedb
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5439:5432'
    volumes:
        - postgres_notification_db:/var/lib/postgresql/data


  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: rizwanriaz1988@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin


#  for kong setup

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      # - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    profiles: ["database"]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data






volumes:
  postgres_db:
    driver: local
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_user_db:
    driver: local
  postgres_order_db:
    driver: local
  postgres_payment_db:
    driver: local
  postgres_notification_db:
    driver: local
    
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs  
  
networks:
  default:
    driver: bridge

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD